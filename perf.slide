# Performance: What is the all fuss?

Razan Medani (@razanmedani) | Mohamed Yousif
9 July 2021
razan@soluspay.net
adonese@soluspay.net

## Agenda

- We gonna talk about performance
- Concurrency and parallelism 
- Metrics, benchmarks and so
- Live coding session?

## About us

- Razan Medani | Mohamed Yousif
- Software developers with interest in distributed systems and coding in general
- Love coding
- We do fintech @noebs and @Solus
- Open source developers
- Many projects can be found [Here at noebs repo](https://github.com/noebs)


## To the team

This is really a special thank you to all of my colleagues, friends and the open source community in general. You guys rock!

.image https://media.giphy.com/media/7mQbDHkoSsWl2/giphy.gif

: i really love you guys!

## Let's talk Performance

- Performance?
- What is Performance?
- Why is it important?
- What is the cost?
- Is my code slow?

I'm not going to go through that all

## i wanna send stuff

_let us go through a real life scenario (with code)_

- the task is we wanna send sms for tons of users
	- sms provider (twillio.sd)
	- contact number
	- content
- that should be really simple, aight?

## SMS code

.code sms1.go

So, yeah it is that simple! 
Send in a request and that is it, pretty much, aight!

(i mean we have to handle errors, properly refactor the code a bit and make the code `good practice`)

## SMS code - 2

Let's just briefly run the numbers here, our program in its current case:

- can only send one message at a time (cool cool cool cool)
- it works

_Make it works, make it right and then make it fast_.

Now, we are happy. The sms is sent but albeit in some gibberish format (unicode!). But it works
Let's make it right and make our have some legit messages (_whispering most of sms gateways have this unicode=1 query args, but we will check their docs anyways_)



## SMS code - make it fast

Our code works actually

It exactly produces correct results

And it sends our content in arabic too. So, what is the fuss all about?

We need it to scale, baby!

## Scaling

Our code works pretty well when we want to send 100 sms

What if we want to send to 10K! Or even 100K!



	In the face of ambiguity, refuse the temptation to guess.
	- Zen of Python

Don't guess. Make informed decisions. Benchmark.


## Get back to the code!

- We have main program entry (can we scale up that? CAN WE?). Aka .exe file
- But the real code looks like this:
	- get numbers (list of numbers, maybe from database) **getMobileNumbers**
	- `for` loop to iterate through those numbers, aight?
	- and then we take every mobile number at a time and send them an sms **sendSMS**

How can we fix that? I mean, where do you think the bottleneck is? Where our code slows us down? Where can we scale it up to make it less slower (errr faster i meant ðŸ˜­ðŸ™„)

It is clear our code spends most of its time in **sendSMS** function isn't it?

## parallelism, Concurrency?

Concurrency is about _dealing_ with lots of things at once. Parallelism is about _doing_ lots of things at once.
- rob pike

Some approaches:

- use async / await? (Ø¨Ø§Ù„Ø¬Ø¯ØŸ)
- launch threads?
- use a queue? As in a database or what exactly?

Gosh! What is the problem we are trying to solve again?

## approaches


.html table.html

We want to send 1000 req / sec. 

.code sms2.go


## Concurrency - 2

The previous program will exit before completion!

We want to await somewhere?

.code sms3.go 

## Concurrency - 3

- We have to handle errors
- Perform retrials
- And trying to not overwhelm the other server (ha!)

We have to make some decisions here. What if a request failed? How we should interrupt that? And handle it.

When you go down the road of concurrency, it is not a free ticket.

- The program won't run top down
- Data races occur A LOT!
- And you start to have n-times the programs than our normal programs.

Our normal programs run top to bottom. They are linear in their behavior, we have no data races and everything is really smooth. It all comes at a cost

## Concurrency - Design

When you decide for concurrency, you have to answer these questions:

Concurrency means handle lots of things at once, but not doing lots of things at once!

- will that be faster? (concurrency doesn't mean speed)
- how can you handle errors?
- how can you interrupt errors?
- `time.Sleep()`
- when will the program ends (how can we notify the application's main thread that other threads have finished?)

The problem with concurrency is everything gotta get off your hands.

## Concurrency - Design 2

**ERRORS**

Why do we even care about that, let's just consider this scenario:

Launch 1000 req / sec to the server, what could possibly go wrong:

- we might not have an internet connection?
- the server might be down
- we might overwhelm our own system's resources [https://adonese.sd/2021/06/01/fd.html](more about this here!)

Argh! Why do we even care! Let's just fire up those pesky sockets and call it a day.

## Concurrency - Problems

- Fire up multiple requests. BUT make sure we are not sending too much
- Coordinate between the different threads without introducing data races

## Concurrency - CSP

One approach we extensively use throughout our org is CSP (or channels and go-routines)

- Go-routines are really just co-routines, small tiny lil threads 
- We have two approaches for sharing state (argh, data race again):
	- we can use locks
	- we can use channels 

That solves for the second problem. But not really for the first one.


## Concurrency - Counting semaphore

How can we make sure we can only SEND 1000 request / second.

- A trivial way is to use a global state with a lock
- It will keep track of the number of our active requests we have, decrease the counter when a successful request is made

That concept has a name to it and it is called `counting semaphore`. But enough with the semantics. Counting semaphore can help us ensure that only **N** active requests are made.


## Concurrency - Other considerations?

- Maybe we could do exponential back-offs 


That is really all about it. But performance is such a wild topic. Let's discuss another example and this time from noebs.


## Pub-Sub

Publisher - Subscriber has some good use cases in queues, in chats applications and such scenarios. It is quite very powerful and has made as one of nice approaches to tackle interesting problems in software.

## Pub-Sub in noebs

The problem we ran into is that we want to send notifications to our users without affecting the performance (eg without slowing down our requests / responses)

